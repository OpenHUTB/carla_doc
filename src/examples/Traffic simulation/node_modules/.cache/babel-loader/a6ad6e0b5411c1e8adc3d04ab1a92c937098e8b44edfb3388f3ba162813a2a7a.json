{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration1',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    const pointSideLength = 2.5;\n    return {\n      ref: 'decoration-1',\n      svgWH: [200, 50],\n      svgScale: [1, 1],\n      rowNum: 4,\n      rowPoints: 20,\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n      points: [],\n      rects: [],\n      defaultColor: ['#fff', '#0de7c2'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    calcSVGData() {\n      const {\n        calcPointsPosition,\n        calcRectsPosition,\n        calcScale\n      } = this;\n      calcPointsPosition();\n      calcRectsPosition();\n      calcScale();\n    },\n    calcPointsPosition() {\n      const {\n        svgWH,\n        rowNum,\n        rowPoints\n      } = this;\n      const [w, h] = svgWH;\n      const horizontalGap = w / (rowPoints + 1);\n      const verticalGap = h / (rowNum + 1);\n      let points = new Array(rowNum).fill(0).map((foo, i) => new Array(rowPoints).fill(0).map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)]));\n      this.points = points.reduce((all, item) => [...all, ...item], []);\n    },\n    calcRectsPosition() {\n      const {\n        points,\n        rowPoints\n      } = this;\n      const rect1 = points[rowPoints * 2 - 1];\n      const rect2 = points[rowPoints * 2 - 3];\n      this.rects = [rect1, rect2];\n    },\n    calcScale() {\n      const {\n        width,\n        height,\n        svgWH\n      } = this;\n      const [w, h] = svgWH;\n      this.svgScale = [width / w, height / h];\n    },\n    onResize() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted() {\n    const {\n      mergeColor\n    } = this;\n    mergeColor();\n  }\n};","map":{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","color","type","Array","default","data","pointSideLength","ref","svgWH","svgScale","rowNum","rowPoints","halfPointSideLength","points","rects","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","calcPointsPosition","calcRectsPosition","calcScale","w","h","horizontalGap","verticalGap","fill","map","foo","i","j","reduce","all","item","rect1","rect2","width","height","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration1/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-1\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n\n      <template\n        v-for=\"(point, i) in points\"\n      >\n        <rect\n          v-if=\"Math.random() > 0.6\"\n          :key=\"i\"\n          :fill=\"mergedColor[0]\"\n          :x=\"point[0] - halfPointSideLength\"\n          :y=\"point[1] - halfPointSideLength\"\n          :width=\"pointSideLength\"\n          :height=\"pointSideLength\"\n        >\n          <animate\n            v-if=\"Math.random() > 0.6\"\n            attributeName=\"fill\"\n            :values=\"`${mergedColor[0]};transparent`\"\n            dur=\"1s\"\n            :begin=\"Math.random() * 2\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n\n      <rect\n        v-if=\"rects[0]\"\n        :fill=\"mergedColor[1]\"\n        :x=\"rects[0][0] - pointSideLength\"\n        :y=\"rects[0][1] - pointSideLength\"\n        :width=\"pointSideLength * 2\"\n        :height=\"pointSideLength * 2\"\n      >\n        <animate\n          attributeName=\"width\"\n          :values=\"`0;${pointSideLength * 2}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"height\"\n          :values=\"`0;${pointSideLength * 2}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          :values=\"`${rects[0][0]};${rects[0][0] - pointSideLength}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"y\"\n          :values=\"`${rects[0][1]};${rects[0][1] - pointSideLength}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n\n      <rect\n        v-if=\"rects[1]\"\n        :fill=\"mergedColor[1]\"\n        :x=\"rects[1][0] - 40\"\n        :y=\"rects[1][1] - pointSideLength\"\n        :width=\"40\"\n        :height=\"pointSideLength * 2\"\n      >\n        <animate\n          attributeName=\"width\"\n          values=\"0;40;0\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n        <animate\n          attributeName=\"x\"\n          :values=\"`${rects[1][0]};${rects[1][0] - 40};${rects[1][0]}`\"\n          dur=\"2s\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration1',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const pointSideLength = 2.5\n\n    return {\n      ref: 'decoration-1',\n\n      svgWH: [200, 50],\n\n      svgScale: [1, 1],\n\n      rowNum: 4,\n      rowPoints: 20,\n\n      pointSideLength,\n      halfPointSideLength: pointSideLength / 2,\n\n      points: [],\n\n      rects: [],\n\n      defaultColor: ['#fff', '#0de7c2'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcRectsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcRectsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n    },\n    calcRectsPosition () {\n      const { points, rowPoints } = this\n\n      const rect1 = points[rowPoints * 2 - 1]\n      const rect2 = points[rowPoints * 2 - 3]\n\n      this.rects = [rect1, rect2]\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"],"mappings":"AAuFA,OAAAA,UAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAJ,UAAA;EACAK,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAC,KAAA;IACA,MAAAC,eAAA;IAEA;MACAC,GAAA;MAEAC,KAAA;MAEAC,QAAA;MAEAC,MAAA;MACAC,SAAA;MAEAL,eAAA;MACAM,mBAAA,EAAAN,eAAA;MAEAO,MAAA;MAEAC,KAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAhB,MAAA;MACA;QAAAiB;MAAA;MAEAA,UAAA;IACA;EACA;EACAC,OAAA;IACAC,yBAAA;MACA;QAAAC;MAAA;MAEAA,WAAA;IACA;IACAA,YAAA;MACA;QAAAC,kBAAA;QAAAC,iBAAA;QAAAC;MAAA;MAEAF,kBAAA;MAEAC,iBAAA;MAEAC,SAAA;IACA;IACAF,mBAAA;MACA;QAAAd,KAAA;QAAAE,MAAA;QAAAC;MAAA;MAEA,OAAAc,CAAA,EAAAC,CAAA,IAAAlB,KAAA;MAEA,MAAAmB,aAAA,GAAAF,CAAA,IAAAd,SAAA;MACA,MAAAiB,WAAA,GAAAF,CAAA,IAAAhB,MAAA;MAEA,IAAAG,MAAA,OAAAV,KAAA,CAAAO,MAAA,EAAAmB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,CAAA,KACA,IAAA7B,KAAA,CAAAQ,SAAA,EAAAkB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAE,CAAA,MACAN,aAAA,IAAAM,CAAA,OAAAL,WAAA,IAAAI,CAAA,MACA;MAEA,KAAAnB,MAAA,GAAAA,MAAA,CAAAqB,MAAA,EAAAC,GAAA,EAAAC,IAAA,SAAAD,GAAA,KAAAC,IAAA;IACA;IACAb,kBAAA;MACA;QAAAV,MAAA;QAAAF;MAAA;MAEA,MAAA0B,KAAA,GAAAxB,MAAA,CAAAF,SAAA;MACA,MAAA2B,KAAA,GAAAzB,MAAA,CAAAF,SAAA;MAEA,KAAAG,KAAA,IAAAuB,KAAA,EAAAC,KAAA;IACA;IACAd,UAAA;MACA;QAAAe,KAAA;QAAAC,MAAA;QAAAhC;MAAA;MAEA,OAAAiB,CAAA,EAAAC,CAAA,IAAAlB,KAAA;MAEA,KAAAC,QAAA,IAAA8B,KAAA,GAAAd,CAAA,EAAAe,MAAA,GAAAd,CAAA;IACA;IACAe,SAAA;MACA;QAAApB;MAAA;MAEAA,WAAA;IACA;IACAH,WAAA;MACA;QAAAjB,KAAA;QAAAc;MAAA;MAEA,KAAAC,WAAA,GAAApB,SAAA,CAAAC,SAAA,CAAAkB,YAAA,SAAAd,KAAA;IACA;EACA;EACAyC,QAAA;IACA;MAAAxB;IAAA;IAEAA,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}