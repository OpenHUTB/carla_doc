{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawPolylinePath = drawPolylinePath;\nexports.drawBezierCurvePath = drawBezierCurvePath;\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\n/**\r\n * @description Draw a polyline path\r\n * @param {Object} ctx        Canvas 2d context\r\n * @param {Array} points      The points that makes up a polyline\r\n * @param {Boolean} beginPath Whether to execute beginPath\r\n * @param {Boolean} closePath Whether to execute closePath\r\n * @return {Undefined} Void\r\n */\nfunction drawPolylinePath(ctx, points) {\n  var beginPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var closePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!ctx || points.length < 2) return false;\n  if (beginPath) ctx.beginPath();\n  points.forEach(function (point, i) {\n    return point && (i === 0 ? ctx.moveTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(point)) : ctx.lineTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(point)));\n  });\n  if (closePath) ctx.closePath();\n}\n/**\r\n * @description Draw a bezier curve path\r\n * @param {Object} ctx        Canvas 2d context\r\n * @param {Array} points      The points that makes up a bezier curve\r\n * @param {Array} moveTo      The point need to excute moveTo\r\n * @param {Boolean} beginPath Whether to execute beginPath\r\n * @param {Boolean} closePath Whether to execute closePath\r\n * @return {Undefined} Void\r\n */\n\nfunction drawBezierCurvePath(ctx, points) {\n  var moveTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var beginPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var closePath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (!ctx || !points) return false;\n  if (beginPath) ctx.beginPath();\n  if (moveTo) ctx.moveTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(moveTo));\n  points.forEach(function (item) {\n    return item && ctx.bezierCurveTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(item[0]).concat((0, _toConsumableArray2[\"default\"])(item[1]), (0, _toConsumableArray2[\"default\"])(item[2])));\n  });\n  if (closePath) ctx.closePath();\n}\nvar _default = {\n  drawPolylinePath: drawPolylinePath,\n  drawBezierCurvePath: drawBezierCurvePath\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","drawPolylinePath","drawBezierCurvePath","_toConsumableArray2","ctx","points","beginPath","arguments","length","undefined","closePath","forEach","point","i","moveTo","apply","lineTo","item","bezierCurveTo","concat","_default"],"sources":["D:/doc/workplace/vscode/Traffic simulation/node_modules/@jiaminghi/c-render/lib/plugin/canvas.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.drawPolylinePath = drawPolylinePath;\nexports.drawBezierCurvePath = drawBezierCurvePath;\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\n/**\r\n * @description Draw a polyline path\r\n * @param {Object} ctx        Canvas 2d context\r\n * @param {Array} points      The points that makes up a polyline\r\n * @param {Boolean} beginPath Whether to execute beginPath\r\n * @param {Boolean} closePath Whether to execute closePath\r\n * @return {Undefined} Void\r\n */\nfunction drawPolylinePath(ctx, points) {\n  var beginPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var closePath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  if (!ctx || points.length < 2) return false;\n  if (beginPath) ctx.beginPath();\n  points.forEach(function (point, i) {\n    return point && (i === 0 ? ctx.moveTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(point)) : ctx.lineTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(point)));\n  });\n  if (closePath) ctx.closePath();\n}\n/**\r\n * @description Draw a bezier curve path\r\n * @param {Object} ctx        Canvas 2d context\r\n * @param {Array} points      The points that makes up a bezier curve\r\n * @param {Array} moveTo      The point need to excute moveTo\r\n * @param {Boolean} beginPath Whether to execute beginPath\r\n * @param {Boolean} closePath Whether to execute closePath\r\n * @return {Undefined} Void\r\n */\n\n\nfunction drawBezierCurvePath(ctx, points) {\n  var moveTo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var beginPath = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var closePath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (!ctx || !points) return false;\n  if (beginPath) ctx.beginPath();\n  if (moveTo) ctx.moveTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(moveTo));\n  points.forEach(function (item) {\n    return item && ctx.bezierCurveTo.apply(ctx, (0, _toConsumableArray2[\"default\"])(item[0]).concat((0, _toConsumableArray2[\"default\"])(item[1]), (0, _toConsumableArray2[\"default\"])(item[2])));\n  });\n  if (closePath) ctx.closePath();\n}\n\nvar _default = {\n  drawPolylinePath: drawPolylinePath,\n  drawBezierCurvePath: drawBezierCurvePath\n};\nexports[\"default\"] = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}