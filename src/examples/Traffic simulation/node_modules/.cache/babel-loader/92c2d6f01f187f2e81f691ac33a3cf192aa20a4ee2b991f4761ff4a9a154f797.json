{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deepClone = deepClone;\nexports.eliminateBlur = eliminateBlur;\nexports.checkPointIsInCircle = checkPointIsInCircle;\nexports.getTwoPointDistance = getTwoPointDistance;\nexports.checkPointIsInPolygon = checkPointIsInPolygon;\nexports.checkPointIsInSector = checkPointIsInSector;\nexports.checkPointIsNearPolyline = checkPointIsNearPolyline;\nexports.checkPointIsInRect = checkPointIsInRect;\nexports.getRotatePointPos = getRotatePointPos;\nexports.getScalePointPos = getScalePointPos;\nexports.getTranslatePointPos = getTranslatePointPos;\nexports.getDistanceBetweenPointAndLine = getDistanceBetweenPointAndLine;\nexports.getCircleRadianPoint = getCircleRadianPoint;\nexports.getRegularPolygonPoints = getRegularPolygonPoints;\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar abs = Math.abs,\n  sqrt = Math.sqrt,\n  sin = Math.sin,\n  cos = Math.cos,\n  max = Math.max,\n  min = Math.min,\n  PI = Math.PI;\n/**\r\n * @description Clone an object or array\r\n * @param {Object|Array} object Cloned object\r\n * @param {Boolean} recursion   Whether to use recursive cloning\r\n * @return {Object|Array} Clone object\r\n */\n\nfunction deepClone(object) {\n  var recursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!object) return object;\n  var parse = JSON.parse,\n    stringify = JSON.stringify;\n  if (!recursion) return parse(stringify(object));\n  var clonedObj = object instanceof Array ? [] : {};\n  if (object && (0, _typeof2[\"default\"])(object) === 'object') {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        if (object[key] && (0, _typeof2[\"default\"])(object[key]) === 'object') {\n          clonedObj[key] = deepClone(object[key], true);\n        } else {\n          clonedObj[key] = object[key];\n        }\n      }\n    }\n  }\n  return clonedObj;\n}\n/**\r\n * @description Eliminate line blur due to 1px line width\r\n * @param {Array} points Line points\r\n * @return {Array} Line points after processed\r\n */\n\nfunction eliminateBlur(points) {\n  return points.map(function (_ref) {\n    var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n      x = _ref2[0],\n      y = _ref2[1];\n    return [parseInt(x) + 0.5, parseInt(y) + 0.5];\n  });\n}\n/**\r\n * @description Check if the point is inside the circle\r\n * @param {Array} point Postion of point\r\n * @param {Number} rx   Circle x coordinate\r\n * @param {Number} ry   Circle y coordinate\r\n * @param {Number} r    Circle radius\r\n * @return {Boolean} Result of check\r\n */\n\nfunction checkPointIsInCircle(point, rx, ry, r) {\n  return getTwoPointDistance(point, [rx, ry]) <= r;\n}\n/**\r\n * @description Get the distance between two points\r\n * @param {Array} point1 point1\r\n * @param {Array} point2 point2\r\n * @return {Number} Distance between two points\r\n */\n\nfunction getTwoPointDistance(_ref3, _ref4) {\n  var _ref5 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n    xa = _ref5[0],\n    ya = _ref5[1];\n  var _ref6 = (0, _slicedToArray2[\"default\"])(_ref4, 2),\n    xb = _ref6[0],\n    yb = _ref6[1];\n  var minusX = abs(xa - xb);\n  var minusY = abs(ya - yb);\n  return sqrt(minusX * minusX + minusY * minusY);\n}\n/**\r\n * @description Check if the point is inside the polygon\r\n * @param {Array} point  Postion of point\r\n * @param {Array} points The points that makes up a polyline\r\n * @return {Boolean} Result of check\r\n */\n\nfunction checkPointIsInPolygon(point, polygon) {\n  var counter = 0;\n  var _point = (0, _slicedToArray2[\"default\"])(point, 2),\n    x = _point[0],\n    y = _point[1];\n  var pointNum = polygon.length;\n  for (var i = 1, p1 = polygon[0]; i <= pointNum; i++) {\n    var p2 = polygon[i % pointNum];\n    if (x > min(p1[0], p2[0]) && x <= max(p1[0], p2[0])) {\n      if (y <= max(p1[1], p2[1])) {\n        if (p1[0] !== p2[0]) {\n          var xinters = (x - p1[0]) * (p2[1] - p1[1]) / (p2[0] - p1[0]) + p1[1];\n          if (p1[1] === p2[1] || y <= xinters) {\n            counter++;\n          }\n        }\n      }\n    }\n    p1 = p2;\n  }\n  return counter % 2 === 1;\n}\n/**\r\n * @description Check if the point is inside the sector\r\n * @param {Array} point       Postion of point\r\n * @param {Number} rx         Sector x coordinate\r\n * @param {Number} ry         Sector y coordinate\r\n * @param {Number} r          Sector radius\r\n * @param {Number} startAngle Sector start angle\r\n * @param {Number} endAngle   Sector end angle\r\n * @param {Boolean} clockWise Whether the sector angle is clockwise\r\n * @return {Boolean} Result of check\r\n */\n\nfunction checkPointIsInSector(point, rx, ry, r, startAngle, endAngle, clockWise) {\n  if (!point) return false;\n  if (getTwoPointDistance(point, [rx, ry]) > r) return false;\n  if (!clockWise) {\n    var _deepClone = deepClone([endAngle, startAngle]);\n    var _deepClone2 = (0, _slicedToArray2[\"default\"])(_deepClone, 2);\n    startAngle = _deepClone2[0];\n    endAngle = _deepClone2[1];\n  }\n  var reverseBE = startAngle > endAngle;\n  if (reverseBE) {\n    var _ref7 = [endAngle, startAngle];\n    startAngle = _ref7[0];\n    endAngle = _ref7[1];\n  }\n  var minus = endAngle - startAngle;\n  if (minus >= PI * 2) return true;\n  var _point2 = (0, _slicedToArray2[\"default\"])(point, 2),\n    x = _point2[0],\n    y = _point2[1];\n  var _getCircleRadianPoint = getCircleRadianPoint(rx, ry, r, startAngle),\n    _getCircleRadianPoint2 = (0, _slicedToArray2[\"default\"])(_getCircleRadianPoint, 2),\n    bx = _getCircleRadianPoint2[0],\n    by = _getCircleRadianPoint2[1];\n  var _getCircleRadianPoint3 = getCircleRadianPoint(rx, ry, r, endAngle),\n    _getCircleRadianPoint4 = (0, _slicedToArray2[\"default\"])(_getCircleRadianPoint3, 2),\n    ex = _getCircleRadianPoint4[0],\n    ey = _getCircleRadianPoint4[1];\n  var vPoint = [x - rx, y - ry];\n  var vBArm = [bx - rx, by - ry];\n  var vEArm = [ex - rx, ey - ry];\n  var reverse = minus > PI;\n  if (reverse) {\n    var _deepClone3 = deepClone([vEArm, vBArm]);\n    var _deepClone4 = (0, _slicedToArray2[\"default\"])(_deepClone3, 2);\n    vBArm = _deepClone4[0];\n    vEArm = _deepClone4[1];\n  }\n  var inSector = isClockWise(vBArm, vPoint) && !isClockWise(vEArm, vPoint);\n  if (reverse) inSector = !inSector;\n  if (reverseBE) inSector = !inSector;\n  return inSector;\n}\n/**\r\n * @description Determine if the point is in the clockwise direction of the vector\r\n * @param {Array} vArm   Vector\r\n * @param {Array} vPoint Point\r\n * @return {Boolean} Result of check\r\n */\n\nfunction isClockWise(vArm, vPoint) {\n  var _vArm = (0, _slicedToArray2[\"default\"])(vArm, 2),\n    ax = _vArm[0],\n    ay = _vArm[1];\n  var _vPoint = (0, _slicedToArray2[\"default\"])(vPoint, 2),\n    px = _vPoint[0],\n    py = _vPoint[1];\n  return -ay * px + ax * py > 0;\n}\n/**\r\n * @description Check if the point is inside the polyline\r\n * @param {Array} point      Postion of point\r\n * @param {Array} polyline   The points that makes up a polyline\r\n * @param {Number} lineWidth Polyline linewidth\r\n * @return {Boolean} Result of check\r\n */\n\nfunction checkPointIsNearPolyline(point, polyline, lineWidth) {\n  var halfLineWidth = lineWidth / 2;\n  var moveUpPolyline = polyline.map(function (_ref8) {\n    var _ref9 = (0, _slicedToArray2[\"default\"])(_ref8, 2),\n      x = _ref9[0],\n      y = _ref9[1];\n    return [x, y - halfLineWidth];\n  });\n  var moveDownPolyline = polyline.map(function (_ref10) {\n    var _ref11 = (0, _slicedToArray2[\"default\"])(_ref10, 2),\n      x = _ref11[0],\n      y = _ref11[1];\n    return [x, y + halfLineWidth];\n  });\n  var polygon = [].concat((0, _toConsumableArray2[\"default\"])(moveUpPolyline), (0, _toConsumableArray2[\"default\"])(moveDownPolyline.reverse()));\n  return checkPointIsInPolygon(point, polygon);\n}\n/**\r\n * @description Check if the point is inside the rect\r\n * @param {Array} point   Postion of point\r\n * @param {Number} x      Rect start x coordinate\r\n * @param {Number} y      Rect start y coordinate\r\n * @param {Number} width  Rect width\r\n * @param {Number} height Rect height\r\n * @return {Boolean} Result of check\r\n */\n\nfunction checkPointIsInRect(_ref12, x, y, width, height) {\n  var _ref13 = (0, _slicedToArray2[\"default\"])(_ref12, 2),\n    px = _ref13[0],\n    py = _ref13[1];\n  if (px < x) return false;\n  if (py < y) return false;\n  if (px > x + width) return false;\n  if (py > y + height) return false;\n  return true;\n}\n/**\r\n * @description Get the coordinates of the rotated point\r\n * @param {Number} rotate Degree of rotation\r\n * @param {Array} point   Postion of point\r\n * @param {Array} origin  Rotation center\r\n * @param {Array} origin  Rotation center\r\n * @return {Number} Coordinates after rotation\r\n */\n\nfunction getRotatePointPos() {\n  var rotate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var point = arguments.length > 1 ? arguments[1] : undefined;\n  var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n  if (!point) return false;\n  if (rotate % 360 === 0) return point;\n  var _point3 = (0, _slicedToArray2[\"default\"])(point, 2),\n    x = _point3[0],\n    y = _point3[1];\n  var _origin = (0, _slicedToArray2[\"default\"])(origin, 2),\n    ox = _origin[0],\n    oy = _origin[1];\n  rotate *= PI / 180;\n  return [(x - ox) * cos(rotate) - (y - oy) * sin(rotate) + ox, (x - ox) * sin(rotate) + (y - oy) * cos(rotate) + oy];\n}\n/**\r\n * @description Get the coordinates of the scaled point\r\n * @param {Array} scale  Scale factor\r\n * @param {Array} point  Postion of point\r\n * @param {Array} origin Scale center\r\n * @return {Number} Coordinates after scale\r\n */\n\nfunction getScalePointPos() {\n  var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [1, 1];\n  var point = arguments.length > 1 ? arguments[1] : undefined;\n  var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n  if (!point) return false;\n  if (scale === 1) return point;\n  var _point4 = (0, _slicedToArray2[\"default\"])(point, 2),\n    x = _point4[0],\n    y = _point4[1];\n  var _origin2 = (0, _slicedToArray2[\"default\"])(origin, 2),\n    ox = _origin2[0],\n    oy = _origin2[1];\n  var _scale = (0, _slicedToArray2[\"default\"])(scale, 2),\n    xs = _scale[0],\n    ys = _scale[1];\n  var relativePosX = x - ox;\n  var relativePosY = y - oy;\n  return [relativePosX * xs + ox, relativePosY * ys + oy];\n}\n/**\r\n * @description Get the coordinates of the scaled point\r\n * @param {Array} translate Translation distance\r\n * @param {Array} point     Postion of point\r\n * @return {Number} Coordinates after translation\r\n */\n\nfunction getTranslatePointPos(translate, point) {\n  if (!translate || !point) return false;\n  var _point5 = (0, _slicedToArray2[\"default\"])(point, 2),\n    x = _point5[0],\n    y = _point5[1];\n  var _translate = (0, _slicedToArray2[\"default\"])(translate, 2),\n    tx = _translate[0],\n    ty = _translate[1];\n  return [x + tx, y + ty];\n}\n/**\r\n * @description Get the distance from the point to the line\r\n * @param {Array} point     Postion of point\r\n * @param {Array} lineBegin Line start position\r\n * @param {Array} lineEnd   Line end position\r\n * @return {Number} Distance between point and line\r\n */\n\nfunction getDistanceBetweenPointAndLine(point, lineBegin, lineEnd) {\n  if (!point || !lineBegin || !lineEnd) return false;\n  var _point6 = (0, _slicedToArray2[\"default\"])(point, 2),\n    x = _point6[0],\n    y = _point6[1];\n  var _lineBegin = (0, _slicedToArray2[\"default\"])(lineBegin, 2),\n    x1 = _lineBegin[0],\n    y1 = _lineBegin[1];\n  var _lineEnd = (0, _slicedToArray2[\"default\"])(lineEnd, 2),\n    x2 = _lineEnd[0],\n    y2 = _lineEnd[1];\n  var a = y2 - y1;\n  var b = x1 - x2;\n  var c = y1 * (x2 - x1) - x1 * (y2 - y1);\n  var molecule = abs(a * x + b * y + c);\n  var denominator = sqrt(a * a + b * b);\n  return molecule / denominator;\n}\n/**\r\n * @description Get the coordinates of the specified radian on the circle\r\n * @param {Number} x      Circle x coordinate\r\n * @param {Number} y      Circle y coordinate\r\n * @param {Number} radius Circle radius\r\n * @param {Number} radian Specfied radian\r\n * @return {Array} Postion of point\r\n */\n\nfunction getCircleRadianPoint(x, y, radius, radian) {\n  return [x + cos(radian) * radius, y + sin(radian) * radius];\n}\n/**\r\n * @description Get the points that make up a regular polygon\r\n * @param {Number} x     X coordinate of the polygon inscribed circle\r\n * @param {Number} y     Y coordinate of the polygon inscribed circle\r\n * @param {Number} r     Radius of the polygon inscribed circle\r\n * @param {Number} side  Side number\r\n * @param {Number} minus Radian offset\r\n * @return {Array} Points that make up a regular polygon\r\n */\n\nfunction getRegularPolygonPoints(rx, ry, r, side) {\n  var minus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PI * -0.5;\n  var radianGap = PI * 2 / side;\n  var radians = new Array(side).fill('').map(function (t, i) {\n    return i * radianGap + minus;\n  });\n  return radians.map(function (radian) {\n    return getCircleRadianPoint(rx, ry, r, radian);\n  });\n}\nvar _default = {\n  deepClone: deepClone,\n  eliminateBlur: eliminateBlur,\n  checkPointIsInCircle: checkPointIsInCircle,\n  checkPointIsInPolygon: checkPointIsInPolygon,\n  checkPointIsInSector: checkPointIsInSector,\n  checkPointIsNearPolyline: checkPointIsNearPolyline,\n  getTwoPointDistance: getTwoPointDistance,\n  getRotatePointPos: getRotatePointPos,\n  getScalePointPos: getScalePointPos,\n  getTranslatePointPos: getTranslatePointPos,\n  getCircleRadianPoint: getCircleRadianPoint,\n  getRegularPolygonPoints: getRegularPolygonPoints,\n  getDistanceBetweenPointAndLine: getDistanceBetweenPointAndLine\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","deepClone","eliminateBlur","checkPointIsInCircle","getTwoPointDistance","checkPointIsInPolygon","checkPointIsInSector","checkPointIsNearPolyline","checkPointIsInRect","getRotatePointPos","getScalePointPos","getTranslatePointPos","getDistanceBetweenPointAndLine","getCircleRadianPoint","getRegularPolygonPoints","_toConsumableArray2","_slicedToArray2","_typeof2","abs","Math","sqrt","sin","cos","max","min","PI","object","recursion","arguments","length","undefined","parse","JSON","stringify","clonedObj","Array","key","hasOwnProperty","points","map","_ref","_ref2","x","y","parseInt","point","rx","ry","r","_ref3","_ref4","_ref5","xa","ya","_ref6","xb","yb","minusX","minusY","polygon","counter","_point","pointNum","i","p1","p2","xinters","startAngle","endAngle","clockWise","_deepClone","_deepClone2","reverseBE","_ref7","minus","_point2","_getCircleRadianPoint","_getCircleRadianPoint2","bx","by","_getCircleRadianPoint3","_getCircleRadianPoint4","ex","ey","vPoint","vBArm","vEArm","reverse","_deepClone3","_deepClone4","inSector","isClockWise","vArm","_vArm","ax","ay","_vPoint","px","py","polyline","lineWidth","halfLineWidth","moveUpPolyline","_ref8","_ref9","moveDownPolyline","_ref10","_ref11","concat","_ref12","width","height","_ref13","rotate","origin","_point3","_origin","ox","oy","scale","_point4","_origin2","_scale","xs","ys","relativePosX","relativePosY","translate","_point5","_translate","tx","ty","lineBegin","lineEnd","_point6","_lineBegin","x1","y1","_lineEnd","x2","y2","a","b","c","molecule","denominator","radius","radian","side","radianGap","radians","fill","t","_default"],"sources":["D:/doc/workplace/vscode/vue03/node_modules/@jiaminghi/c-render/lib/plugin/util.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deepClone = deepClone;\nexports.eliminateBlur = eliminateBlur;\nexports.checkPointIsInCircle = checkPointIsInCircle;\nexports.getTwoPointDistance = getTwoPointDistance;\nexports.checkPointIsInPolygon = checkPointIsInPolygon;\nexports.checkPointIsInSector = checkPointIsInSector;\nexports.checkPointIsNearPolyline = checkPointIsNearPolyline;\nexports.checkPointIsInRect = checkPointIsInRect;\nexports.getRotatePointPos = getRotatePointPos;\nexports.getScalePointPos = getScalePointPos;\nexports.getTranslatePointPos = getTranslatePointPos;\nexports.getDistanceBetweenPointAndLine = getDistanceBetweenPointAndLine;\nexports.getCircleRadianPoint = getCircleRadianPoint;\nexports.getRegularPolygonPoints = getRegularPolygonPoints;\nexports[\"default\"] = void 0;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar abs = Math.abs,\n    sqrt = Math.sqrt,\n    sin = Math.sin,\n    cos = Math.cos,\n    max = Math.max,\n    min = Math.min,\n    PI = Math.PI;\n/**\r\n * @description Clone an object or array\r\n * @param {Object|Array} object Cloned object\r\n * @param {Boolean} recursion   Whether to use recursive cloning\r\n * @return {Object|Array} Clone object\r\n */\n\nfunction deepClone(object) {\n  var recursion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!object) return object;\n  var parse = JSON.parse,\n      stringify = JSON.stringify;\n  if (!recursion) return parse(stringify(object));\n  var clonedObj = object instanceof Array ? [] : {};\n\n  if (object && (0, _typeof2[\"default\"])(object) === 'object') {\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) {\n        if (object[key] && (0, _typeof2[\"default\"])(object[key]) === 'object') {\n          clonedObj[key] = deepClone(object[key], true);\n        } else {\n          clonedObj[key] = object[key];\n        }\n      }\n    }\n  }\n\n  return clonedObj;\n}\n/**\r\n * @description Eliminate line blur due to 1px line width\r\n * @param {Array} points Line points\r\n * @return {Array} Line points after processed\r\n */\n\n\nfunction eliminateBlur(points) {\n  return points.map(function (_ref) {\n    var _ref2 = (0, _slicedToArray2[\"default\"])(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    return [parseInt(x) + 0.5, parseInt(y) + 0.5];\n  });\n}\n/**\r\n * @description Check if the point is inside the circle\r\n * @param {Array} point Postion of point\r\n * @param {Number} rx   Circle x coordinate\r\n * @param {Number} ry   Circle y coordinate\r\n * @param {Number} r    Circle radius\r\n * @return {Boolean} Result of check\r\n */\n\n\nfunction checkPointIsInCircle(point, rx, ry, r) {\n  return getTwoPointDistance(point, [rx, ry]) <= r;\n}\n/**\r\n * @description Get the distance between two points\r\n * @param {Array} point1 point1\r\n * @param {Array} point2 point2\r\n * @return {Number} Distance between two points\r\n */\n\n\nfunction getTwoPointDistance(_ref3, _ref4) {\n  var _ref5 = (0, _slicedToArray2[\"default\"])(_ref3, 2),\n      xa = _ref5[0],\n      ya = _ref5[1];\n\n  var _ref6 = (0, _slicedToArray2[\"default\"])(_ref4, 2),\n      xb = _ref6[0],\n      yb = _ref6[1];\n\n  var minusX = abs(xa - xb);\n  var minusY = abs(ya - yb);\n  return sqrt(minusX * minusX + minusY * minusY);\n}\n/**\r\n * @description Check if the point is inside the polygon\r\n * @param {Array} point  Postion of point\r\n * @param {Array} points The points that makes up a polyline\r\n * @return {Boolean} Result of check\r\n */\n\n\nfunction checkPointIsInPolygon(point, polygon) {\n  var counter = 0;\n\n  var _point = (0, _slicedToArray2[\"default\"])(point, 2),\n      x = _point[0],\n      y = _point[1];\n\n  var pointNum = polygon.length;\n\n  for (var i = 1, p1 = polygon[0]; i <= pointNum; i++) {\n    var p2 = polygon[i % pointNum];\n\n    if (x > min(p1[0], p2[0]) && x <= max(p1[0], p2[0])) {\n      if (y <= max(p1[1], p2[1])) {\n        if (p1[0] !== p2[0]) {\n          var xinters = (x - p1[0]) * (p2[1] - p1[1]) / (p2[0] - p1[0]) + p1[1];\n\n          if (p1[1] === p2[1] || y <= xinters) {\n            counter++;\n          }\n        }\n      }\n    }\n\n    p1 = p2;\n  }\n\n  return counter % 2 === 1;\n}\n/**\r\n * @description Check if the point is inside the sector\r\n * @param {Array} point       Postion of point\r\n * @param {Number} rx         Sector x coordinate\r\n * @param {Number} ry         Sector y coordinate\r\n * @param {Number} r          Sector radius\r\n * @param {Number} startAngle Sector start angle\r\n * @param {Number} endAngle   Sector end angle\r\n * @param {Boolean} clockWise Whether the sector angle is clockwise\r\n * @return {Boolean} Result of check\r\n */\n\n\nfunction checkPointIsInSector(point, rx, ry, r, startAngle, endAngle, clockWise) {\n  if (!point) return false;\n  if (getTwoPointDistance(point, [rx, ry]) > r) return false;\n\n  if (!clockWise) {\n    var _deepClone = deepClone([endAngle, startAngle]);\n\n    var _deepClone2 = (0, _slicedToArray2[\"default\"])(_deepClone, 2);\n\n    startAngle = _deepClone2[0];\n    endAngle = _deepClone2[1];\n  }\n\n  var reverseBE = startAngle > endAngle;\n\n  if (reverseBE) {\n    var _ref7 = [endAngle, startAngle];\n    startAngle = _ref7[0];\n    endAngle = _ref7[1];\n  }\n\n  var minus = endAngle - startAngle;\n  if (minus >= PI * 2) return true;\n\n  var _point2 = (0, _slicedToArray2[\"default\"])(point, 2),\n      x = _point2[0],\n      y = _point2[1];\n\n  var _getCircleRadianPoint = getCircleRadianPoint(rx, ry, r, startAngle),\n      _getCircleRadianPoint2 = (0, _slicedToArray2[\"default\"])(_getCircleRadianPoint, 2),\n      bx = _getCircleRadianPoint2[0],\n      by = _getCircleRadianPoint2[1];\n\n  var _getCircleRadianPoint3 = getCircleRadianPoint(rx, ry, r, endAngle),\n      _getCircleRadianPoint4 = (0, _slicedToArray2[\"default\"])(_getCircleRadianPoint3, 2),\n      ex = _getCircleRadianPoint4[0],\n      ey = _getCircleRadianPoint4[1];\n\n  var vPoint = [x - rx, y - ry];\n  var vBArm = [bx - rx, by - ry];\n  var vEArm = [ex - rx, ey - ry];\n  var reverse = minus > PI;\n\n  if (reverse) {\n    var _deepClone3 = deepClone([vEArm, vBArm]);\n\n    var _deepClone4 = (0, _slicedToArray2[\"default\"])(_deepClone3, 2);\n\n    vBArm = _deepClone4[0];\n    vEArm = _deepClone4[1];\n  }\n\n  var inSector = isClockWise(vBArm, vPoint) && !isClockWise(vEArm, vPoint);\n  if (reverse) inSector = !inSector;\n  if (reverseBE) inSector = !inSector;\n  return inSector;\n}\n/**\r\n * @description Determine if the point is in the clockwise direction of the vector\r\n * @param {Array} vArm   Vector\r\n * @param {Array} vPoint Point\r\n * @return {Boolean} Result of check\r\n */\n\n\nfunction isClockWise(vArm, vPoint) {\n  var _vArm = (0, _slicedToArray2[\"default\"])(vArm, 2),\n      ax = _vArm[0],\n      ay = _vArm[1];\n\n  var _vPoint = (0, _slicedToArray2[\"default\"])(vPoint, 2),\n      px = _vPoint[0],\n      py = _vPoint[1];\n\n  return -ay * px + ax * py > 0;\n}\n/**\r\n * @description Check if the point is inside the polyline\r\n * @param {Array} point      Postion of point\r\n * @param {Array} polyline   The points that makes up a polyline\r\n * @param {Number} lineWidth Polyline linewidth\r\n * @return {Boolean} Result of check\r\n */\n\n\nfunction checkPointIsNearPolyline(point, polyline, lineWidth) {\n  var halfLineWidth = lineWidth / 2;\n  var moveUpPolyline = polyline.map(function (_ref8) {\n    var _ref9 = (0, _slicedToArray2[\"default\"])(_ref8, 2),\n        x = _ref9[0],\n        y = _ref9[1];\n\n    return [x, y - halfLineWidth];\n  });\n  var moveDownPolyline = polyline.map(function (_ref10) {\n    var _ref11 = (0, _slicedToArray2[\"default\"])(_ref10, 2),\n        x = _ref11[0],\n        y = _ref11[1];\n\n    return [x, y + halfLineWidth];\n  });\n  var polygon = [].concat((0, _toConsumableArray2[\"default\"])(moveUpPolyline), (0, _toConsumableArray2[\"default\"])(moveDownPolyline.reverse()));\n  return checkPointIsInPolygon(point, polygon);\n}\n/**\r\n * @description Check if the point is inside the rect\r\n * @param {Array} point   Postion of point\r\n * @param {Number} x      Rect start x coordinate\r\n * @param {Number} y      Rect start y coordinate\r\n * @param {Number} width  Rect width\r\n * @param {Number} height Rect height\r\n * @return {Boolean} Result of check\r\n */\n\n\nfunction checkPointIsInRect(_ref12, x, y, width, height) {\n  var _ref13 = (0, _slicedToArray2[\"default\"])(_ref12, 2),\n      px = _ref13[0],\n      py = _ref13[1];\n\n  if (px < x) return false;\n  if (py < y) return false;\n  if (px > x + width) return false;\n  if (py > y + height) return false;\n  return true;\n}\n/**\r\n * @description Get the coordinates of the rotated point\r\n * @param {Number} rotate Degree of rotation\r\n * @param {Array} point   Postion of point\r\n * @param {Array} origin  Rotation center\r\n * @param {Array} origin  Rotation center\r\n * @return {Number} Coordinates after rotation\r\n */\n\n\nfunction getRotatePointPos() {\n  var rotate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var point = arguments.length > 1 ? arguments[1] : undefined;\n  var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n  if (!point) return false;\n  if (rotate % 360 === 0) return point;\n\n  var _point3 = (0, _slicedToArray2[\"default\"])(point, 2),\n      x = _point3[0],\n      y = _point3[1];\n\n  var _origin = (0, _slicedToArray2[\"default\"])(origin, 2),\n      ox = _origin[0],\n      oy = _origin[1];\n\n  rotate *= PI / 180;\n  return [(x - ox) * cos(rotate) - (y - oy) * sin(rotate) + ox, (x - ox) * sin(rotate) + (y - oy) * cos(rotate) + oy];\n}\n/**\r\n * @description Get the coordinates of the scaled point\r\n * @param {Array} scale  Scale factor\r\n * @param {Array} point  Postion of point\r\n * @param {Array} origin Scale center\r\n * @return {Number} Coordinates after scale\r\n */\n\n\nfunction getScalePointPos() {\n  var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [1, 1];\n  var point = arguments.length > 1 ? arguments[1] : undefined;\n  var origin = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [0, 0];\n  if (!point) return false;\n  if (scale === 1) return point;\n\n  var _point4 = (0, _slicedToArray2[\"default\"])(point, 2),\n      x = _point4[0],\n      y = _point4[1];\n\n  var _origin2 = (0, _slicedToArray2[\"default\"])(origin, 2),\n      ox = _origin2[0],\n      oy = _origin2[1];\n\n  var _scale = (0, _slicedToArray2[\"default\"])(scale, 2),\n      xs = _scale[0],\n      ys = _scale[1];\n\n  var relativePosX = x - ox;\n  var relativePosY = y - oy;\n  return [relativePosX * xs + ox, relativePosY * ys + oy];\n}\n/**\r\n * @description Get the coordinates of the scaled point\r\n * @param {Array} translate Translation distance\r\n * @param {Array} point     Postion of point\r\n * @return {Number} Coordinates after translation\r\n */\n\n\nfunction getTranslatePointPos(translate, point) {\n  if (!translate || !point) return false;\n\n  var _point5 = (0, _slicedToArray2[\"default\"])(point, 2),\n      x = _point5[0],\n      y = _point5[1];\n\n  var _translate = (0, _slicedToArray2[\"default\"])(translate, 2),\n      tx = _translate[0],\n      ty = _translate[1];\n\n  return [x + tx, y + ty];\n}\n/**\r\n * @description Get the distance from the point to the line\r\n * @param {Array} point     Postion of point\r\n * @param {Array} lineBegin Line start position\r\n * @param {Array} lineEnd   Line end position\r\n * @return {Number} Distance between point and line\r\n */\n\n\nfunction getDistanceBetweenPointAndLine(point, lineBegin, lineEnd) {\n  if (!point || !lineBegin || !lineEnd) return false;\n\n  var _point6 = (0, _slicedToArray2[\"default\"])(point, 2),\n      x = _point6[0],\n      y = _point6[1];\n\n  var _lineBegin = (0, _slicedToArray2[\"default\"])(lineBegin, 2),\n      x1 = _lineBegin[0],\n      y1 = _lineBegin[1];\n\n  var _lineEnd = (0, _slicedToArray2[\"default\"])(lineEnd, 2),\n      x2 = _lineEnd[0],\n      y2 = _lineEnd[1];\n\n  var a = y2 - y1;\n  var b = x1 - x2;\n  var c = y1 * (x2 - x1) - x1 * (y2 - y1);\n  var molecule = abs(a * x + b * y + c);\n  var denominator = sqrt(a * a + b * b);\n  return molecule / denominator;\n}\n/**\r\n * @description Get the coordinates of the specified radian on the circle\r\n * @param {Number} x      Circle x coordinate\r\n * @param {Number} y      Circle y coordinate\r\n * @param {Number} radius Circle radius\r\n * @param {Number} radian Specfied radian\r\n * @return {Array} Postion of point\r\n */\n\n\nfunction getCircleRadianPoint(x, y, radius, radian) {\n  return [x + cos(radian) * radius, y + sin(radian) * radius];\n}\n/**\r\n * @description Get the points that make up a regular polygon\r\n * @param {Number} x     X coordinate of the polygon inscribed circle\r\n * @param {Number} y     Y coordinate of the polygon inscribed circle\r\n * @param {Number} r     Radius of the polygon inscribed circle\r\n * @param {Number} side  Side number\r\n * @param {Number} minus Radian offset\r\n * @return {Array} Points that make up a regular polygon\r\n */\n\n\nfunction getRegularPolygonPoints(rx, ry, r, side) {\n  var minus = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : PI * -0.5;\n  var radianGap = PI * 2 / side;\n  var radians = new Array(side).fill('').map(function (t, i) {\n    return i * radianGap + minus;\n  });\n  return radians.map(function (radian) {\n    return getCircleRadianPoint(rx, ry, r, radian);\n  });\n}\n\nvar _default = {\n  deepClone: deepClone,\n  eliminateBlur: eliminateBlur,\n  checkPointIsInCircle: checkPointIsInCircle,\n  checkPointIsInPolygon: checkPointIsInPolygon,\n  checkPointIsInSector: checkPointIsInSector,\n  checkPointIsNearPolyline: checkPointIsNearPolyline,\n  getTwoPointDistance: getTwoPointDistance,\n  getRotatePointPos: getRotatePointPos,\n  getScalePointPos: getScalePointPos,\n  getTranslatePointPos: getTranslatePointPos,\n  getCircleRadianPoint: getCircleRadianPoint,\n  getRegularPolygonPoints: getRegularPolygonPoints,\n  getDistanceBetweenPointAndLine: getDistanceBetweenPointAndLine\n};\nexports[\"default\"] = _default;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}