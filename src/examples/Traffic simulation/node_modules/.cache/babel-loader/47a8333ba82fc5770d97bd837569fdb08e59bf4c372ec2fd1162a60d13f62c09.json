{"ast":null,"code":"import CRender from '@jiaminghi/c-render';\nimport '@jiaminghi/charts/lib/extend/index';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDigitalFlop',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    return {\n      renderer: null,\n      defaultConfig: {\n        /**\n         * @description Number for digital flop\n         * @type {Array<Number>}\n         * @default number = []\n         * @example number = [10]\n         */\n        number: [],\n        /**\n         * @description Content formatter\n         * @type {String}\n         * @default content = ''\n         * @example content = '{nt}个'\n         */\n        content: '',\n        /**\n         * @description Number toFixed\n         * @type {Number}\n         * @default toFixed = 0\n         */\n        toFixed: 0,\n        /**\n         * @description Text align\n         * @type {String}\n         * @default textAlign = 'center'\n         * @example textAlign = 'center' | 'left' | 'right'\n         */\n        textAlign: 'center',\n        /**\n         * @description rowGap\n         * @type {Number}\n         @default rowGap = 0\n         */\n        rowGap: 0,\n        /**\n         * @description Text style configuration\n         * @type {Object} {CRender Class Style}\n         */\n        style: {\n          fontSize: 30,\n          fill: '#3de7c9'\n        },\n        /**\n         * @description Number formatter\n         * @type {Null|Function}\n         */\n        formatter: undefined,\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n      mergedConfig: null,\n      graph: null\n    };\n  },\n  watch: {\n    config() {\n      const {\n        update\n      } = this;\n      update();\n    }\n  },\n  methods: {\n    init() {\n      const {\n        initRender,\n        mergeConfig,\n        initGraph\n      } = this;\n      initRender();\n      mergeConfig();\n      initGraph();\n    },\n    initRender() {\n      const {\n        $refs\n      } = this;\n      this.renderer = new CRender($refs['digital-flop']);\n    },\n    mergeConfig() {\n      const {\n        defaultConfig,\n        config\n      } = this;\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {});\n    },\n    initGraph() {\n      const {\n        getShape,\n        getStyle,\n        renderer,\n        mergedConfig\n      } = this;\n      const {\n        animationCurve,\n        animationFrame\n      } = mergedConfig;\n      const shape = getShape();\n      const style = getStyle();\n      this.graph = renderer.add({\n        name: 'numberText',\n        animationCurve,\n        animationFrame,\n        shape,\n        style\n      });\n    },\n    getShape() {\n      const {\n        number,\n        content,\n        toFixed,\n        textAlign,\n        rowGap,\n        formatter\n      } = this.mergedConfig;\n      const [w, h] = this.renderer.area;\n      const position = [w / 2, h / 2];\n      if (textAlign === 'left') position[0] = 0;\n      if (textAlign === 'right') position[0] = w;\n      return {\n        number,\n        content,\n        toFixed,\n        position,\n        rowGap,\n        formatter\n      };\n    },\n    getStyle() {\n      const {\n        style,\n        textAlign\n      } = this.mergedConfig;\n      return deepMerge(style, {\n        textAlign,\n        textBaseline: 'middle'\n      });\n    },\n    update() {\n      const {\n        mergeConfig,\n        mergeShape,\n        getShape,\n        getStyle,\n        graph,\n        mergedConfig\n      } = this;\n      graph.animationEnd();\n      mergeConfig();\n      if (!graph) return;\n      const {\n        animationCurve,\n        animationFrame\n      } = mergedConfig;\n      const shape = getShape();\n      const style = getStyle();\n      mergeShape(graph, shape);\n      graph.animationCurve = animationCurve;\n      graph.animationFrame = animationFrame;\n      graph.animation('style', style, true);\n      graph.animation('shape', shape);\n    },\n    mergeShape(graph, shape) {\n      const cacheNum = graph.shape.number.length;\n      const shapeNum = shape.number.length;\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number;\n    }\n  },\n  mounted() {\n    const {\n      init\n    } = this;\n    init();\n  }\n};","map":{"version":3,"names":["CRender","deepMerge","deepClone","name","props","config","type","Object","default","data","renderer","defaultConfig","number","content","toFixed","textAlign","rowGap","style","fontSize","fill","formatter","undefined","animationCurve","animationFrame","mergedConfig","graph","watch","update","methods","init","initRender","mergeConfig","initGraph","$refs","getShape","getStyle","shape","add","w","h","area","position","textBaseline","mergeShape","animationEnd","animation","cacheNum","length","shapeNum","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/digitalFlop/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-digital-flop\">\n    <canvas ref=\"digital-flop\" />\n  </div>\n</template>\n\n<script>\nimport CRender from '@jiaminghi/c-render'\n\nimport '@jiaminghi/charts/lib/extend/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDigitalFlop',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    return {\n      renderer: null,\n\n      defaultConfig: {\n        /**\n         * @description Number for digital flop\n         * @type {Array<Number>}\n         * @default number = []\n         * @example number = [10]\n         */\n        number: [],\n        /**\n         * @description Content formatter\n         * @type {String}\n         * @default content = ''\n         * @example content = '{nt}个'\n         */\n        content: '',\n        /**\n         * @description Number toFixed\n         * @type {Number}\n         * @default toFixed = 0\n         */\n        toFixed: 0,\n        /**\n         * @description Text align\n         * @type {String}\n         * @default textAlign = 'center'\n         * @example textAlign = 'center' | 'left' | 'right'\n         */\n        textAlign: 'center',\n        /**\n         * @description rowGap\n         * @type {Number}\n         @default rowGap = 0\n         */\n        rowGap: 0,\n        /**\n         * @description Text style configuration\n         * @type {Object} {CRender Class Style}\n         */\n        style: {\n          fontSize: 30,\n          fill: '#3de7c9'\n        },\n        /**\n         * @description Number formatter\n         * @type {Null|Function}\n         */\n        formatter: undefined,\n        /**\n         * @description CRender animationCurve\n         * @type {String}\n         * @default animationCurve = 'easeOutCubic'\n         */\n        animationCurve: 'easeOutCubic',\n        /**\n         * @description CRender animationFrame\n         * @type {String}\n         * @default animationFrame = 50\n         */\n        animationFrame: 50\n      },\n\n      mergedConfig: null,\n\n      graph: null\n    }\n  },\n  watch: {\n    config () {\n      const { update } = this\n\n      update()\n    }\n  },\n  methods: {\n    init () {\n      const { initRender, mergeConfig, initGraph } = this\n\n      initRender()\n\n      mergeConfig()\n\n      initGraph()\n    },\n    initRender () {\n      const { $refs } = this\n\n      this.renderer = new CRender($refs['digital-flop'])\n    },\n    mergeConfig () {\n      const { defaultConfig, config } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    },\n    initGraph () {\n      const { getShape, getStyle, renderer, mergedConfig } = this\n\n      const { animationCurve, animationFrame } = mergedConfig\n\n      const shape = getShape()\n      const style = getStyle()\n\n      this.graph = renderer.add({\n        name: 'numberText',\n        animationCurve,\n        animationFrame,\n        shape,\n        style\n      })\n    },\n    getShape () {\n      const { number, content, toFixed, textAlign, rowGap, formatter } = this.mergedConfig\n\n      const [w, h] = this.renderer.area\n\n      const position = [w / 2, h / 2]\n\n      if (textAlign === 'left') position[0] = 0\n      if (textAlign === 'right') position[0] = w\n\n      return {\n        number,\n        content,\n        toFixed,\n        position,\n        rowGap,\n        formatter\n      }\n    },\n    getStyle () {\n      const { style, textAlign } = this.mergedConfig\n\n      return deepMerge(style, {\n        textAlign,\n        textBaseline: 'middle'\n      })\n    },\n    update () {\n      const { mergeConfig, mergeShape, getShape, getStyle, graph, mergedConfig } = this\n\n      graph.animationEnd()\n\n      mergeConfig()\n\n      if (!graph) return\n\n      const { animationCurve, animationFrame } = mergedConfig\n\n      const shape = getShape()\n      const style = getStyle()\n\n      mergeShape(graph, shape)\n\n      graph.animationCurve = animationCurve\n      graph.animationFrame = animationFrame\n\n      graph.animation('style', style, true)\n      graph.animation('shape', shape)\n    },\n    mergeShape (graph, shape) {\n      const cacheNum = graph.shape.number.length\n      const shapeNum = shape.number.length\n\n      if (cacheNum !== shapeNum) graph.shape.number = shape.number\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}