{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { randomExtend } from '../../../util';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration6',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    }\n  },\n  data() {\n    const rectWidth = 7;\n    return {\n      ref: 'decoration-6',\n      svgWH: [300, 35],\n      svgScale: [1, 1],\n      rowNum: 1,\n      rowPoints: 40,\n      rectWidth,\n      halfRectWidth: rectWidth / 2,\n      points: [],\n      heights: [],\n      minHeights: [],\n      randoms: [],\n      defaultColor: ['#7acaec', '#7acaec'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    calcSVGData() {\n      const {\n        calcPointsPosition,\n        calcScale\n      } = this;\n      calcPointsPosition();\n      calcScale();\n    },\n    calcPointsPosition() {\n      const {\n        svgWH,\n        rowNum,\n        rowPoints\n      } = this;\n      const [w, h] = svgWH;\n      const horizontalGap = w / (rowPoints + 1);\n      const verticalGap = h / (rowNum + 1);\n      let points = new Array(rowNum).fill(0).map((foo, i) => new Array(rowPoints).fill(0).map((foo, j) => [horizontalGap * (j + 1), verticalGap * (i + 1)]));\n      this.points = points.reduce((all, item) => [...all, ...item], []);\n      const heights = this.heights = new Array(rowNum * rowPoints).fill(0).map(foo => Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h));\n      this.minHeights = new Array(rowNum * rowPoints).fill(0).map((foo, i) => heights[i] * Math.random());\n      this.randoms = new Array(rowNum * rowPoints).fill(0).map(foo => Math.random() + 1.5);\n    },\n    calcScale() {\n      const {\n        width,\n        height,\n        svgWH\n      } = this;\n      const [w, h] = svgWH;\n      this.svgScale = [width / w, height / h];\n    },\n    onResize() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted() {\n    const {\n      mergeColor\n    } = this;\n    mergeColor();\n  }\n};","map":{"version":3,"names":["autoResize","randomExtend","deepMerge","deepClone","name","mixins","props","color","type","Array","default","data","rectWidth","ref","svgWH","svgScale","rowNum","rowPoints","halfRectWidth","points","heights","minHeights","randoms","defaultColor","mergedColor","watch","mergeColor","methods","afterAutoResizeMixinInit","calcSVGData","calcPointsPosition","calcScale","w","h","horizontalGap","verticalGap","fill","map","foo","i","j","reduce","all","item","Math","random","width","height","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration6/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-6\" :ref=\"ref\">\n    <svg :width=\"`${svgWH[0]}px`\" :height=\"`${svgWH[1]}px`\" :style=\"`transform:scale(${svgScale[0]},${svgScale[1]});`\">\n      <template\n        v-for=\"(point, i) in points\"\n      >\n        <rect\n          :key=\"i\"\n          :fill=\"mergedColor[Math.random() > 0.5 ? 0 : 1]\"\n          :x=\"point[0] - halfRectWidth\"\n          :y=\"point[1] - heights[i] / 2\"\n          :width=\"rectWidth\"\n          :height=\"heights[i]\"\n        >\n          <animate\n            attributeName=\"y\"\n            :values=\"`${point[1] - minHeights[i] / 2};${point[1] - heights[i] / 2};${point[1] - minHeights[i] / 2}`\"\n            :dur=\"`${randoms[i]}s`\"\n            keyTimes=\"0;0.5;1\"\n            calcMode=\"spline\"\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\n            begin=\"0s\"\n            repeatCount=\"indefinite\"\n          />\n          <animate\n            attributeName=\"height\"\n            :values=\"`${minHeights[i]};${heights[i]};${minHeights[i]}`\"\n            :dur=\"`${randoms[i]}s`\"\n            keyTimes=\"0;0.5;1\"\n            calcMode=\"spline\"\n            keySplines=\"0.42,0,0.58,1;0.42,0,0.58,1\"\n            begin=\"0s\"\n            repeatCount=\"indefinite\"\n          />\n        </rect>\n      </template>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { randomExtend } from '../../../util'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration6',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    }\n  },\n  data () {\n    const rectWidth = 7\n\n    return {\n      ref: 'decoration-6',\n\n      svgWH: [300, 35],\n\n      svgScale: [1, 1],\n\n      rowNum: 1,\n      rowPoints: 40,\n\n      rectWidth,\n      halfRectWidth: rectWidth / 2,\n\n      points: [],\n      heights: [],\n      minHeights: [],\n      randoms: [],\n\n      defaultColor: ['#7acaec', '#7acaec'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { calcPointsPosition, calcScale } = this\n\n      calcPointsPosition()\n\n      calcScale()\n    },\n    calcPointsPosition () {\n      const { svgWH, rowNum, rowPoints } = this\n\n      const [w, h] = svgWH\n\n      const horizontalGap = w / (rowPoints + 1)\n      const verticalGap = h / (rowNum + 1)\n\n      let points = new Array(rowNum).fill(0).map((foo, i) =>\n        new Array(rowPoints).fill(0).map((foo, j) => [\n          horizontalGap * (j + 1), verticalGap * (i + 1)\n        ]))\n\n      this.points = points.reduce((all, item) => [...all, ...item], [])\n      const heights = this.heights = new Array(rowNum * rowPoints)\n        .fill(0).map(foo =>\n          Math.random() > 0.8 ? randomExtend(0.7 * h, h) : randomExtend(0.2 * h, 0.5 * h))\n\n      this.minHeights = new Array(rowNum * rowPoints)\n        .fill(0).map((foo, i) => heights[i] * Math.random())\n\n      this.randoms = new Array(rowNum * rowPoints)\n        .fill(0).map(foo => Math.random() + 1.5)\n    },\n    calcScale () {\n      const { width, height, svgWH } = this\n\n      const [w, h] = svgWH\n\n      this.svgScale = [width / w, height / h]\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"],"mappings":"AAyCA,OAAAA,UAAA;AAEA,SAAAC,YAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAL,UAAA;EACAM,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAC,KAAA;IACA,MAAAC,SAAA;IAEA;MACAC,GAAA;MAEAC,KAAA;MAEAC,QAAA;MAEAC,MAAA;MACAC,SAAA;MAEAL,SAAA;MACAM,aAAA,EAAAN,SAAA;MAEAO,MAAA;MACAC,OAAA;MACAC,UAAA;MACAC,OAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAlB,MAAA;MACA;QAAAmB;MAAA;MAEAA,UAAA;IACA;EACA;EACAC,OAAA;IACAC,yBAAA;MACA;QAAAC;MAAA;MAEAA,WAAA;IACA;IACAA,YAAA;MACA;QAAAC,kBAAA;QAAAC;MAAA;MAEAD,kBAAA;MAEAC,SAAA;IACA;IACAD,mBAAA;MACA;QAAAhB,KAAA;QAAAE,MAAA;QAAAC;MAAA;MAEA,OAAAe,CAAA,EAAAC,CAAA,IAAAnB,KAAA;MAEA,MAAAoB,aAAA,GAAAF,CAAA,IAAAf,SAAA;MACA,MAAAkB,WAAA,GAAAF,CAAA,IAAAjB,MAAA;MAEA,IAAAG,MAAA,OAAAV,KAAA,CAAAO,MAAA,EAAAoB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,CAAA,KACA,IAAA9B,KAAA,CAAAQ,SAAA,EAAAmB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAE,CAAA,MACAN,aAAA,IAAAM,CAAA,OAAAL,WAAA,IAAAI,CAAA,MACA;MAEA,KAAApB,MAAA,GAAAA,MAAA,CAAAsB,MAAA,EAAAC,GAAA,EAAAC,IAAA,SAAAD,GAAA,KAAAC,IAAA;MACA,MAAAvB,OAAA,QAAAA,OAAA,OAAAX,KAAA,CAAAO,MAAA,GAAAC,SAAA,EACAmB,IAAA,IAAAC,GAAA,CAAAC,GAAA,IACAM,IAAA,CAAAC,MAAA,WAAA5C,YAAA,OAAAgC,CAAA,EAAAA,CAAA,IAAAhC,YAAA,OAAAgC,CAAA,QAAAA,CAAA;MAEA,KAAAZ,UAAA,OAAAZ,KAAA,CAAAO,MAAA,GAAAC,SAAA,EACAmB,IAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,CAAA,KAAAnB,OAAA,CAAAmB,CAAA,IAAAK,IAAA,CAAAC,MAAA;MAEA,KAAAvB,OAAA,OAAAb,KAAA,CAAAO,MAAA,GAAAC,SAAA,EACAmB,IAAA,IAAAC,GAAA,CAAAC,GAAA,IAAAM,IAAA,CAAAC,MAAA;IACA;IACAd,UAAA;MACA;QAAAe,KAAA;QAAAC,MAAA;QAAAjC;MAAA;MAEA,OAAAkB,CAAA,EAAAC,CAAA,IAAAnB,KAAA;MAEA,KAAAC,QAAA,IAAA+B,KAAA,GAAAd,CAAA,EAAAe,MAAA,GAAAd,CAAA;IACA;IACAe,SAAA;MACA;QAAAnB;MAAA;MAEAA,WAAA;IACA;IACAH,WAAA;MACA;QAAAnB,KAAA;QAAAgB;MAAA;MAEA,KAAAC,WAAA,GAAAtB,SAAA,CAAAC,SAAA,CAAAoB,YAAA,SAAAhB,KAAA;IACA;EACA;EACA0C,QAAA;IACA;MAAAvB;IAAA;IAEAA,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}