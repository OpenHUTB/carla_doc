{"ast":null,"code":"import autoResize from '../../../mixin/autoResize';\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index';\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util';\nexport default {\n  name: 'DvDecoration2',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => []\n    },\n    reverse: {\n      type: Boolean,\n      default: false\n    },\n    dur: {\n      type: Number,\n      default: 6\n    }\n  },\n  data() {\n    return {\n      ref: 'decoration-2',\n      x: 0,\n      y: 0,\n      w: 0,\n      h: 0,\n      defaultColor: ['#3faacb', '#fff'],\n      mergedColor: []\n    };\n  },\n  watch: {\n    color() {\n      const {\n        mergeColor\n      } = this;\n      mergeColor();\n    },\n    reverse() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    calcSVGData() {\n      const {\n        reverse,\n        width,\n        height\n      } = this;\n      if (reverse) {\n        this.w = 1;\n        this.h = height;\n        this.x = width / 2;\n        this.y = 0;\n      } else {\n        this.w = width;\n        this.h = 1;\n        this.x = 0;\n        this.y = height / 2;\n      }\n    },\n    onResize() {\n      const {\n        calcSVGData\n      } = this;\n      calcSVGData();\n    },\n    mergeColor() {\n      const {\n        color,\n        defaultColor\n      } = this;\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || []);\n    }\n  },\n  mounted() {\n    const {\n      mergeColor\n    } = this;\n    mergeColor();\n  }\n};","map":{"version":3,"names":["autoResize","deepMerge","deepClone","name","mixins","props","color","type","Array","default","reverse","Boolean","dur","Number","data","ref","x","y","w","h","defaultColor","mergedColor","watch","mergeColor","calcSVGData","methods","afterAutoResizeMixinInit","width","height","onResize","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/decoration2/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-decoration-2\" :ref=\"ref\">\n    <svg :width=\"`${width}px`\" :height=\"`${height}px`\">\n      <rect :x=\"x\" :y=\"y\" :width=\"w\" :height=\"h\" :fill=\"mergedColor[0]\">\n        <animate\n          :attributeName=\"reverse ? 'height' : 'width'\"\n          from=\"0\"\n          :to=\"reverse ? height : width\"\n          :dur=\"`${dur}s`\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\".42,0,.58,1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n\n      <rect :x=\"x\" :y=\"y\" width=\"1\" height=\"1\" :fill=\"mergedColor[1]\">\n        <animate\n          :attributeName=\"reverse ? 'y' : 'x'\"\n          from=\"0\"\n          :to=\"reverse ? height : width\"\n          :dur=\"`${dur}s`\"\n          calcMode=\"spline\"\n          keyTimes=\"0;1\"\n          keySplines=\"0.42,0,0.58,1\"\n          repeatCount=\"indefinite\"\n        />\n      </rect>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport autoResize from '../../../mixin/autoResize'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvDecoration2',\n  mixins: [autoResize],\n  props: {\n    color: {\n      type: Array,\n      default: () => ([])\n    },\n    reverse: {\n      type: Boolean,\n      default: false\n    },\n    dur: {\n      type: Number,\n      default: 6\n    }\n  },\n  data () {\n    return {\n      ref: 'decoration-2',\n\n      x: 0,\n      y: 0,\n\n      w: 0,\n      h: 0,\n\n      defaultColor: ['#3faacb', '#fff'],\n\n      mergedColor: []\n    }\n  },\n  watch: {\n    color () {\n      const { mergeColor } = this\n\n      mergeColor()\n    },\n    reverse () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    calcSVGData () {\n      const { reverse, width, height } = this\n\n      if (reverse) {\n        this.w = 1\n        this.h = height\n        this.x = width / 2\n        this.y = 0\n      } else {\n        this.w = width\n        this.h = 1\n        this.x = 0\n        this.y = height / 2\n      }\n    },\n    onResize () {\n      const { calcSVGData } = this\n\n      calcSVGData()\n    },\n    mergeColor () {\n      const { color, defaultColor } = this\n\n      this.mergedColor = deepMerge(deepClone(defaultColor, true), color || [])\n    }\n  },\n  mounted () {\n    const { mergeColor } = this\n\n    mergeColor()\n  }\n}\n</script>"],"mappings":"AAiCA,OAAAA,UAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAJ,UAAA;EACAK,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;IACA;IACAC,OAAA;MACAH,IAAA,EAAAI,OAAA;MACAF,OAAA;IACA;IACAG,GAAA;MACAL,IAAA,EAAAM,MAAA;MACAJ,OAAA;IACA;EACA;EACAK,KAAA;IACA;MACAC,GAAA;MAEAC,CAAA;MACAC,CAAA;MAEAC,CAAA;MACAC,CAAA;MAEAC,YAAA;MAEAC,WAAA;IACA;EACA;EACAC,KAAA;IACAhB,MAAA;MACA;QAAAiB;MAAA;MAEAA,UAAA;IACA;IACAb,QAAA;MACA;QAAAc;MAAA;MAEAA,WAAA;IACA;EACA;EACAC,OAAA;IACAC,yBAAA;MACA;QAAAF;MAAA;MAEAA,WAAA;IACA;IACAA,YAAA;MACA;QAAAd,OAAA;QAAAiB,KAAA;QAAAC;MAAA;MAEA,IAAAlB,OAAA;QACA,KAAAQ,CAAA;QACA,KAAAC,CAAA,GAAAS,MAAA;QACA,KAAAZ,CAAA,GAAAW,KAAA;QACA,KAAAV,CAAA;MACA;QACA,KAAAC,CAAA,GAAAS,KAAA;QACA,KAAAR,CAAA;QACA,KAAAH,CAAA;QACA,KAAAC,CAAA,GAAAW,MAAA;MACA;IACA;IACAC,SAAA;MACA;QAAAL;MAAA;MAEAA,WAAA;IACA;IACAD,WAAA;MACA;QAAAjB,KAAA;QAAAc;MAAA;MAEA,KAAAC,WAAA,GAAApB,SAAA,CAAAC,SAAA,CAAAkB,YAAA,SAAAd,KAAA;IACA;EACA;EACAwB,QAAA;IACA;MAAAP;IAAA;IAEAA,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}