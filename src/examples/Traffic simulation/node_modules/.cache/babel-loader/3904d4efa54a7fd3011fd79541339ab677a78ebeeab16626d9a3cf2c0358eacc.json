{"ast":null,"code":"import { uuid } from '../../../util/index';\nimport autoResize from '../../../mixin/autoResize';\nimport Charts from '@jiaminghi/charts';\nexport default {\n  name: 'DvCharts',\n  mixins: [autoResize],\n  props: {\n    option: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data() {\n    const id = uuid();\n    return {\n      ref: `charts-container-${id}`,\n      chartRef: `chart-${id}`,\n      chart: null\n    };\n  },\n  watch: {\n    option() {\n      let {\n        chart,\n        option\n      } = this;\n      if (!chart) return;\n      if (!option) option = {};\n      chart.setOption(option, true);\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit() {\n      const {\n        initChart\n      } = this;\n      initChart();\n    },\n    initChart() {\n      const {\n        $refs,\n        chartRef,\n        option\n      } = this;\n      const chart = this.chart = new Charts($refs[chartRef]);\n      if (!option) return;\n      chart.setOption(option);\n    },\n    onResize() {\n      const {\n        chart\n      } = this;\n      if (!chart) return;\n      chart.resize();\n    }\n  }\n};","map":{"version":3,"names":["uuid","autoResize","Charts","name","mixins","props","option","type","Object","default","data","id","ref","chartRef","chart","watch","setOption","methods","afterAutoResizeMixinInit","initChart","$refs","onResize","resize"],"sources":["node_modules/@jiaminghi/data-view/lib/components/charts/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-charts-container\" :ref=\"ref\">\n    <div class=\"charts-canvas-container\" :ref=\"chartRef\" />\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport autoResize from '../../../mixin/autoResize'\n\nimport Charts from '@jiaminghi/charts'\n\nexport default {\n  name: 'DvCharts',\n  mixins: [autoResize],\n  props: {\n    option: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      ref: `charts-container-${id}`,\n      chartRef: `chart-${id}`,\n\n      chart: null\n    }\n  },\n  watch: {\n    option () {\n      let { chart, option } = this\n\n      if (!chart) return\n\n      if (!option) option = {}\n\n      chart.setOption(option, true)\n    }\n  },\n  methods: {\n    afterAutoResizeMixinInit () {\n      const { initChart } = this\n\n      initChart()\n    },\n    initChart () {\n      const { $refs, chartRef, option } = this\n\n      const chart = this.chart = new Charts($refs[chartRef])\n\n      if (!option) return\n\n      chart.setOption(option)\n    },\n    onResize () {\n      const { chart } = this\n\n      if (!chart) return\n\n      chart.resize()\n    }\n  }\n}\n</script>"],"mappings":"AAOA,SAAAA,IAAA;AAEA,OAAAC,UAAA;AAEA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,MAAA,GAAAH,UAAA;EACAI,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAC,KAAA;IACA,MAAAC,EAAA,GAAAX,IAAA;IACA;MACAY,GAAA,sBAAAD,EAAA;MACAE,QAAA,WAAAF,EAAA;MAEAG,KAAA;IACA;EACA;EACAC,KAAA;IACAT,OAAA;MACA;QAAAQ,KAAA;QAAAR;MAAA;MAEA,KAAAQ,KAAA;MAEA,KAAAR,MAAA,EAAAA,MAAA;MAEAQ,KAAA,CAAAE,SAAA,CAAAV,MAAA;IACA;EACA;EACAW,OAAA;IACAC,yBAAA;MACA;QAAAC;MAAA;MAEAA,SAAA;IACA;IACAA,UAAA;MACA;QAAAC,KAAA;QAAAP,QAAA;QAAAP;MAAA;MAEA,MAAAQ,KAAA,QAAAA,KAAA,OAAAZ,MAAA,CAAAkB,KAAA,CAAAP,QAAA;MAEA,KAAAP,MAAA;MAEAQ,KAAA,CAAAE,SAAA,CAAAV,MAAA;IACA;IACAe,SAAA;MACA;QAAAP;MAAA;MAEA,KAAAA,KAAA;MAEAA,KAAA,CAAAQ,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}